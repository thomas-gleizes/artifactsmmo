/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Server Details
         * @description Return the status of the game server.
         */
        get: operations["get_server_details__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/bank": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Bank Details
         * @description Fetch bank details.
         */
        get: operations["get_bank_details_my_bank_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/bank/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Bank Items
         * @description Fetch all items in your bank.
         */
        get: operations["get_bank_items_my_bank_items_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/grandexchange/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Ge Sell Orders
         * @description Fetch your sell orders details.
         */
        get: operations["get_ge_sell_orders_my_grandexchange_orders_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/grandexchange/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Ge Sell History
         * @description Fetch your sales history of the last 7 days.
         */
        get: operations["get_ge_sell_history_my_grandexchange_history_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Account Details
         * @description Fetch account details.
         */
        get: operations["get_account_details_my_details_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/change_password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change Password
         * @description Change your account password. Changing the password reset the account token.
         */
        post: operations["change_password_my_change_password_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/{name}/action/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Move
         * @description Moves a character on the map using the map's X and Y position.
         */
        post: operations["action_move_my__name__action_move_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/{name}/action/rest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Rest
         * @description Recovers hit points by resting. (1 second per 5 HP, minimum 3 seconds)
         */
        post: operations["action_rest_my__name__action_rest_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/{name}/action/equip": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Equip Item
         * @description Equip an item on your character.
         */
        post: operations["action_equip_item_my__name__action_equip_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/{name}/action/unequip": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Unequip Item
         * @description Unequip an item on your character.
         */
        post: operations["action_unequip_item_my__name__action_unequip_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/{name}/action/use": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Use Item
         * @description Use an item as a consumable.
         */
        post: operations["action_use_item_my__name__action_use_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/{name}/action/fight": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Fight
         * @description Start a fight against a monster on the character's map.
         */
        post: operations["action_fight_my__name__action_fight_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/{name}/action/gathering": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Gathering
         * @description Harvest a resource on the character's map.
         */
        post: operations["action_gathering_my__name__action_gathering_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/{name}/action/crafting": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Crafting
         * @description Crafting an item. The character must be on a map with a workshop.
         */
        post: operations["action_crafting_my__name__action_crafting_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/{name}/action/bank/deposit/gold": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Deposit Bank Gold
         * @description Deposit gold in a bank on the character's map.
         */
        post: operations["action_deposit_bank_gold_my__name__action_bank_deposit_gold_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/{name}/action/bank/deposit/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Deposit Bank Item
         * @description Deposit multiple items in a bank on the character's map.
         *     The cooldown will be 3 seconds multiplied by the number of different items withdrawn.
         */
        post: operations["action_deposit_bank_item_my__name__action_bank_deposit_item_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/{name}/action/bank/withdraw/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Withdraw Bank Item
         * @description Take items from your bank and put them in the character's inventory.
         *     The cooldown will be 3 seconds multiplied by the number of different items withdrawn.
         */
        post: operations["action_withdraw_bank_item_my__name__action_bank_withdraw_item_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/{name}/action/bank/withdraw/gold": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Withdraw Bank Gold
         * @description Withdraw gold from your bank.
         */
        post: operations["action_withdraw_bank_gold_my__name__action_bank_withdraw_gold_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/{name}/action/bank/buy_expansion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Buy Bank Expansion
         * @description Buy a 25 slots bank expansion.
         */
        post: operations["action_buy_bank_expansion_my__name__action_bank_buy_expansion_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/{name}/action/npc/buy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Npc Buy Item
         * @description Buy an item from an NPC on the character's map.
         */
        post: operations["action_npc_buy_item_my__name__action_npc_buy_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/{name}/action/npc/sell": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Npc Sell Item
         * @description Sell an item to an NPC on the character's map.
         */
        post: operations["action_npc_sell_item_my__name__action_npc_sell_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/{name}/action/recycling": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Recycling
         * @description Recycling an item. The character must be on a map with a workshop (only for equipments and weapons).
         */
        post: operations["action_recycling_my__name__action_recycling_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/{name}/action/grandexchange/buy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Ge Buy Item
         * @description Buy an item at the Grand Exchange on the character's map.
         */
        post: operations["action_ge_buy_item_my__name__action_grandexchange_buy_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/{name}/action/grandexchange/sell": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Ge Create Sell Order
         * @description Create a sell order at the Grand Exchange on the character's map. Please note there is a 3% listing tax, charged at the time of posting, on the total price.
         */
        post: operations["action_ge_create_sell_order_my__name__action_grandexchange_sell_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/{name}/action/grandexchange/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Ge Cancel Sell Order
         * @description Cancel a sell order at the Grand Exchange on the character's map.
         */
        post: operations["action_ge_cancel_sell_order_my__name__action_grandexchange_cancel_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/{name}/action/task/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Complete Task
         * @description Complete a task.
         */
        post: operations["action_complete_task_my__name__action_task_complete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/{name}/action/task/exchange": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Task Exchange
         * @description Exchange 6 tasks coins for a random reward. Rewards are exclusive items or resources.
         */
        post: operations["action_task_exchange_my__name__action_task_exchange_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/{name}/action/task/new": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Accept New Task
         * @description Accepting a new task.
         */
        post: operations["action_accept_new_task_my__name__action_task_new_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/{name}/action/task/trade": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Task Trade
         * @description Trading items with a Tasks Master.
         */
        post: operations["action_task_trade_my__name__action_task_trade_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/{name}/action/task/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Task Cancel
         * @description Cancel a task for 1 tasks coin.
         */
        post: operations["action_task_cancel_my__name__action_task_cancel_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/{name}/action/give/gold": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Give Gold
         * @description Give gold to another character in your account on the same map.
         */
        post: operations["action_give_gold_my__name__action_give_gold_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/{name}/action/give/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Give Items
         * @description Give items to another character in your account on the same map.
         *     The cooldown will be 3 seconds multiplied by the number of different items given.
         */
        post: operations["action_give_items_my__name__action_give_item_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/{name}/action/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Delete Item
         * @description Delete an item from your character's inventory.
         */
        post: operations["action_delete_item_my__name__action_delete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/{name}/action/change_skin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Change Skin
         * @description Change the skin of your character.
         */
        post: operations["action_change_skin_my__name__action_change_skin_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Characters Logs
         * @description History of the last 250 actions of all your characters.
         */
        get: operations["get_all_characters_logs_my_logs_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/logs/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Character Logs
         * @description History of the last actions of your character.
         */
        get: operations["get_character_logs_my_logs__name__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/characters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get My Characters
         * @description List of your characters.
         */
        get: operations["get_my_characters_my_characters_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Account */
        post: operations["create_account_accounts_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/forgot_password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Forgot Password
         * @description Request a password reset.
         */
        post: operations["forgot_password_accounts_forgot_password_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/reset_password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset Password
         * @description Reset password with a token. Use /forgot_password to get a token by email.
         */
        post: operations["reset_password_accounts_reset_password_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{account}/achievements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Account Achievements
         * @description Retrieve the achievements of a account.
         */
        get: operations["get_account_achievements_accounts__account__achievements_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{account}/characters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Account Characters
         * @description Account character lists.
         */
        get: operations["get_account_characters_accounts__account__characters_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{account}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Account
         * @description Retrieve the details of a character.
         */
        get: operations["get_account_accounts__account__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/achievements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Achievements
         * @description List of all achievements.
         */
        get: operations["get_all_achievements_achievements_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/achievements/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Achievement
         * @description Retrieve the details of a achievement.
         */
        get: operations["get_achievement_achievements__code__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/badges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Badges
         * @description List of all badges.
         */
        get: operations["get_all_badges_badges_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/badges/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Badge
         * @description Retrieve the details of a badge.
         */
        get: operations["get_badge_badges__code__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/characters/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Character
         * @description Create new character on your account. You can create up to 5 characters.
         */
        post: operations["create_character_characters_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/characters/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete Character
         * @description Delete character on your account.
         */
        post: operations["delete_character_characters_delete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/characters/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Character
         * @description Retrieve the details of a character.
         */
        get: operations["get_character_characters__name__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/effects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Effects
         * @description List of all effects. Effects are used by equipment, tools, runes, consumables and monsters. An effect is an action that produces an effect on the game.
         */
        get: operations["get_all_effects_effects_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/effects/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Effect
         * @description Retrieve the details of a badge.
         */
        get: operations["get_effect_effects__code__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Active Events
         * @description Fetch active events details.
         */
        get: operations["get_all_active_events_events_active_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Events
         * @description Fetch events details.
         */
        get: operations["get_all_events_events_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/grandexchange/history/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Ge Sell History
         * @description Fetch the sales history of the item for the last 7 days.
         */
        get: operations["get_ge_sell_history_grandexchange_history__code__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/grandexchange/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Ge Sell Orders
         * @description Fetch all sell orders.
         */
        get: operations["get_ge_sell_orders_grandexchange_orders_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/grandexchange/orders/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Ge Sell Order
         * @description Retrieve the sell order of a item.
         */
        get: operations["get_ge_sell_order_grandexchange_orders__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Items
         * @description Fetch items details.
         */
        get: operations["get_all_items_items_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Item
         * @description Retrieve the details of a item.
         */
        get: operations["get_item_items__code__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/leaderboard/characters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Characters Leaderboard
         * @description Fetch leaderboard details.
         */
        get: operations["get_characters_leaderboard_leaderboard_characters_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/leaderboard/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Accounts Leaderboard
         * @description Fetch leaderboard details.
         */
        get: operations["get_accounts_leaderboard_leaderboard_accounts_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/maps": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Maps
         * @description Fetch maps details.
         */
        get: operations["get_all_maps_maps_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/maps/{x}/{y}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Map
         * @description Retrieve the details of a map.
         */
        get: operations["get_map_maps__x___y__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/monsters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Monsters
         * @description Fetch monsters details.
         */
        get: operations["get_all_monsters_monsters_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/monsters/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Monster
         * @description Retrieve the details of a monster.
         */
        get: operations["get_monster_monsters__code__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/npcs/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Npcs
         * @description Fetch NPCs details.
         */
        get: operations["get_all_npcs_npcs_details_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/npcs/details/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Npc
         * @description Retrieve the details of a NPC.
         */
        get: operations["get_npc_npcs_details__code__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/npcs/items/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Npc Items
         * @description Retrieve the items list of a NPC. If the NPC has items to buy, sell or trade, they will be displayed.
         */
        get: operations["get_npc_items_npcs_items__code__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/npcs/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Npcs Items
         * @description Retrieve the list of all NPC items.
         */
        get: operations["get_all_npcs_items_npcs_items_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Resources
         * @description Fetch resources details.
         */
        get: operations["get_all_resources_resources_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resources/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Resource
         * @description Retrieve the details of a resource.
         */
        get: operations["get_resource_resources__code__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Tasks
         * @description Fetch the list of all tasks.
         */
        get: operations["get_all_tasks_tasks_list_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/list/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Task
         * @description Retrieve the details of a task.
         */
        get: operations["get_task_tasks_list__code__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Tasks Rewards
         * @description Fetch the list of all tasks rewards. To obtain these rewards, you must exchange 6 task coins with a tasks master.
         */
        get: operations["get_all_tasks_rewards_tasks_rewards_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/rewards/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Tasks Reward
         * @description Retrieve the details of a tasks reward.
         */
        get: operations["get_tasks_reward_tasks_rewards__code__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Token
         * @description Use your account as HTTPBasic Auth to generate your token to use the API. You can also generate your token directly on the website.
         */
        post: operations["generate_token_token_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AccountAchievementSchema */
        AccountAchievementSchema: {
            /**
             * Name
             * @description Name of the achievement.
             */
            name: string;
            /**
             * Code
             * @description Code of the achievement.
             */
            code: string;
            /**
             * Description
             * @description Description of the achievement.
             */
            description: string;
            /**
             * Points
             * @description Points of the achievement. Used for the leaderboard.
             */
            points: number;
            /** @description Type of achievement. */
            type: components["schemas"]["AchievementType"];
            /**
             * Target
             * @description Target of the achievement.
             */
            target: string | null;
            /**
             * Total
             * @description Total to do.
             */
            total: number;
            /** @description Rewards. */
            rewards: components["schemas"]["AchievementRewardsSchema"];
            /**
             * Current
             * @description Current progress.
             */
            current: number;
            /**
             * Completed At
             * @description Completed at.
             */
            completed_at: string | null;
        };
        /** AccountDetails */
        AccountDetails: {
            /**
             * Username
             * @description Username.
             */
            username: string;
            /**
             * Member
             * @description Member status.
             */
            member: boolean;
            /** @description Account status. */
            status: components["schemas"]["AccountStatus"];
            /**
             * Badges
             * @description Account badges.
             */
            badges?: unknown[];
            /**
             * Skins
             * @description Skins owned.
             */
            skins: unknown[];
            /**
             * Achievements Points
             * @description Achievement points.
             */
            achievements_points: number;
            /**
             * Banned
             * @description Banned.
             */
            banned: boolean;
            /**
             * Ban Reason
             * @description Ban reason.
             */
            ban_reason?: string;
        };
        /** AccountDetailsSchema */
        AccountDetailsSchema: {
            data: components["schemas"]["AccountDetails"];
        };
        /** AccountLeaderboardSchema */
        AccountLeaderboardSchema: {
            /**
             * Position
             * @description Position in the leaderboard.
             */
            position: number;
            /**
             * Account
             * @description Account name.
             */
            account: string;
            /** @description Member status. */
            status: components["schemas"]["AccountStatus"];
            /**
             * Achievements Points
             * @description Achievements points.
             */
            achievements_points: number;
            /**
             * Gold
             * @description Gold in the account.
             */
            gold: number;
        };
        /**
         * AccountLeaderboardType
         * @enum {string}
         */
        AccountLeaderboardType: "achievements_points" | "gold";
        "AccountLeaderboardType_a-zA-Z0-9_-_____": components["schemas"]["AccountLeaderboardType"];
        /**
         * AccountStatus
         * @enum {string}
         */
        AccountStatus: "standard" | "founder" | "gold_founder" | "vip_founder";
        /** AchievementResponseSchema */
        AchievementResponseSchema: {
            data: components["schemas"]["AchievementSchema"];
        };
        /** AchievementRewardsSchema */
        AchievementRewardsSchema: {
            /**
             * Gold
             * @description Gold rewards.
             */
            gold: number;
        };
        /** AchievementSchema */
        AchievementSchema: {
            /**
             * Name
             * @description Name of the achievement.
             */
            name: string;
            /**
             * Code
             * @description Code of the achievement.
             */
            code: string;
            /**
             * Description
             * @description Description of the achievement.
             */
            description: string;
            /**
             * Points
             * @description Points of the achievement. Used for the leaderboard.
             */
            points: number;
            /** @description Type of achievement. */
            type: components["schemas"]["AchievementType"];
            /**
             * Target
             * @description Target of the achievement.
             */
            target: string | null;
            /**
             * Total
             * @description Total to do.
             */
            total: number;
            /** @description Rewards. */
            rewards: components["schemas"]["AchievementRewardsSchema"];
        };
        /**
         * AchievementType
         * @enum {string}
         */
        AchievementType: "combat_kill" | "combat_drop" | "combat_level" | "gathering" | "crafting" | "recycling" | "task" | "other" | "use";
        "AchievementType_a-zA-Z0-9_-_____": components["schemas"]["AchievementType"];
        /**
         * ActionType
         * @enum {string}
         */
        ActionType: "movement" | "fight" | "crafting" | "gathering" | "buy_ge" | "sell_ge" | "buy_npc" | "sell_npc" | "cancel_ge" | "delete_item" | "deposit_item" | "withdraw_item" | "deposit_gold" | "withdraw_gold" | "equip" | "unequip" | "task" | "christmas_exchange" | "recycling" | "rest" | "use" | "buy_bank_expansion" | "give_item" | "give_gold" | "change_skin" | "rename";
        /** ActiveEventSchema */
        ActiveEventSchema: {
            /**
             * Name
             * @description Name of the event.
             */
            name: string;
            /**
             * Code
             * @description Code of the event.
             */
            code: string;
            /** @description Map of the event. */
            map: components["schemas"]["MapSchema"];
            /** @description Previous map skin. */
            previous_map: components["schemas"]["MapSchema"];
            /**
             * Duration
             * @description Duration in minutes.
             */
            duration: number;
            /**
             * Expiration
             * Format: date-time
             * @description Expiration datetime.
             */
            expiration: string;
            /**
             * Created At
             * Format: date-time
             * @description Start datetime.
             */
            created_at: string;
        };
        /** AddAccountSchema */
        AddAccountSchema: {
            /**
             * Username
             * @description Your desired username.
             */
            username: string;
            /**
             * Password
             * @description Your password.
             */
            password: string;
            /**
             * Email
             * Format: email
             * @description Your email.
             */
            email: string;
        };
        /** AddCharacterSchema */
        AddCharacterSchema: {
            /**
             * Name
             * @description Your desired character name. It's unique and all players can see it.
             */
            name: string;
            /** @description Your desired skin. Skins unlocked by default: 'men1', 'men2', 'men3', 'women1', 'women2', 'women3'. */
            skin: components["schemas"]["CharacterSkin"];
        };
        /** AnnouncementSchema */
        AnnouncementSchema: {
            /**
             * Message
             * @description Announcement text.
             */
            message: string;
            /**
             * Created At
             * Format: date-time
             * @description Datetime of the announcement.
             */
            created_at?: string;
        };
        /** BadgeConditionSchema */
        BadgeConditionSchema: {
            /**
             * Code
             * @description Code of the condition.
             */
            code: string;
            /**
             * Quantity
             * @description Quantity of the condition (if any).
             */
            quantity: number | null;
        };
        /** BadgeResponseSchema */
        BadgeResponseSchema: {
            data: components["schemas"]["BadgeSchema"];
        };
        /** BadgeSchema */
        BadgeSchema: {
            /**
             * Code
             * @description Code of the badge. This is the badge's unique identifier (ID).
             */
            code: string;
            /**
             * Season
             * @description Season of the badge.
             */
            season?: number | null;
            /**
             * Description
             * @description Description of the badge.
             */
            description: string;
            /**
             * Conditions
             * @description Conditions to get the badge.
             */
            conditions: components["schemas"]["BadgeConditionSchema"][];
        };
        /** BankExtensionSchema */
        BankExtensionSchema: {
            /**
             * Price
             * @description Price of the bank extension.
             */
            price: number;
        };
        /** BankExtensionTransactionResponseSchema */
        BankExtensionTransactionResponseSchema: {
            data: components["schemas"]["BankExtensionTransactionSchema"];
        };
        /** BankExtensionTransactionSchema */
        BankExtensionTransactionSchema: {
            /** @description Cooldown details. */
            cooldown: components["schemas"]["CooldownSchema"];
            /** @description Transaction details. */
            transaction: components["schemas"]["BankExtensionSchema"];
            /** @description Player details. */
            character: components["schemas"]["CharacterSchema"];
        };
        /** BankGoldTransactionResponseSchema */
        BankGoldTransactionResponseSchema: {
            data: components["schemas"]["BankGoldTransactionSchema"];
        };
        /** BankGoldTransactionSchema */
        BankGoldTransactionSchema: {
            /** @description Cooldown details. */
            cooldown: components["schemas"]["CooldownSchema"];
            /** @description Bank details. */
            bank: components["schemas"]["GoldSchema"];
            /** @description Player details. */
            character: components["schemas"]["CharacterSchema"];
        };
        /** BankItemTransactionResponseSchema */
        BankItemTransactionResponseSchema: {
            data: components["schemas"]["BankItemTransactionSchema"];
        };
        /** BankItemTransactionSchema */
        BankItemTransactionSchema: {
            /** @description Cooldown details. */
            cooldown: components["schemas"]["CooldownSchema"];
            /**
             * Items
             * @description Items details.
             */
            items: components["schemas"]["SimpleItemSchema"][];
            /**
             * Bank
             * @description Items in your banks.
             */
            bank: components["schemas"]["SimpleItemSchema"][];
            /** @description Player details. */
            character: components["schemas"]["CharacterSchema"];
        };
        /** BankResponseSchema */
        BankResponseSchema: {
            data: components["schemas"]["BankSchema"];
        };
        /** BankSchema */
        BankSchema: {
            /**
             * Slots
             * @description Maximum slots in your bank.
             */
            slots: number;
            /**
             * Expansions
             * @description Bank expansions.
             */
            expansions: number;
            /**
             * Next Expansion Cost
             * @description Next expansion cost.
             */
            next_expansion_cost: number;
            /**
             * Gold
             * @description Quantity of gold in your bank.
             */
            gold: number;
        };
        /** ChangePassword */
        ChangePassword: {
            /**
             * Current Password
             * @description Your password.
             */
            current_password: string;
            /**
             * New Password
             * @description New password.
             */
            new_password: string;
        };
        /** ChangeSkinCharacterDataSchema */
        ChangeSkinCharacterDataSchema: {
            /** @description Cooldown details. */
            cooldown: components["schemas"]["CooldownSchema"];
            /**
             * Skin
             * @description Craft details.
             */
            skin: string;
            /** @description Player details. */
            character: components["schemas"]["CharacterSchema"];
        };
        /** ChangeSkinCharacterSchema */
        ChangeSkinCharacterSchema: {
            /** @description Your desired skin. Skins unlocked by default: 'men1', 'men2', 'men3', 'women1', 'women2', 'women3'. */
            skin: components["schemas"]["CharacterSkin"];
        };
        /** ChangeSkinResponseSchema */
        ChangeSkinResponseSchema: {
            data: components["schemas"]["ChangeSkinCharacterDataSchema"];
        };
        /** CharacterFightDataSchema */
        CharacterFightDataSchema: {
            /** @description Cooldown details. */
            cooldown: components["schemas"]["CooldownSchema"];
            /** @description Fight details. */
            fight: components["schemas"]["FightSchema"];
            /** @description Player details. */
            character: components["schemas"]["CharacterSchema"];
        };
        /** CharacterFightResponseSchema */
        CharacterFightResponseSchema: {
            data: components["schemas"]["CharacterFightDataSchema"];
        };
        /** CharacterLeaderboardSchema */
        CharacterLeaderboardSchema: {
            /**
             * Position
             * @description Position in the leaderboard.
             */
            position: number;
            /**
             * Name
             * @description Character name.
             */
            name: string;
            /**
             * Account
             * @description Account name.
             */
            account: string;
            /** @description Member status. */
            status: components["schemas"]["AccountStatus"];
            /**
             * Skin
             * @description Character skin code.
             */
            skin: string;
            /**
             * Level
             * @description Combat level.
             */
            level: number;
            /**
             * Total Xp
             * @description Total XP of your character.
             */
            total_xp: number;
            /**
             * Mining Level
             * @description Mining level.
             */
            mining_level: number;
            /**
             * Mining Total Xp
             * @description Mining total xp.
             */
            mining_total_xp: number;
            /**
             * Woodcutting Level
             * @description Woodcutting level.
             */
            woodcutting_level: number;
            /**
             * Woodcutting Total Xp
             * @description Woodcutting total xp.
             */
            woodcutting_total_xp: number;
            /**
             * Fishing Level
             * @description Fishing level.
             */
            fishing_level: number;
            /**
             * Fishing Total Xp
             * @description Fishing total xp.
             */
            fishing_total_xp: number;
            /**
             * Weaponcrafting Level
             * @description Weaponcrafting level.
             */
            weaponcrafting_level: number;
            /**
             * Weaponcrafting Total Xp
             * @description Weaponcrafting total xp.
             */
            weaponcrafting_total_xp: number;
            /**
             * Gearcrafting Level
             * @description Gearcrafting level.
             */
            gearcrafting_level: number;
            /**
             * Gearcrafting Total Xp
             * @description Gearcrafting total xp.
             */
            gearcrafting_total_xp: number;
            /**
             * Jewelrycrafting Level
             * @description Jewelrycrafting level.
             */
            jewelrycrafting_level: number;
            /**
             * Jewelrycrafting Total Xp
             * @description Jewelrycrafting total xp.
             */
            jewelrycrafting_total_xp: number;
            /**
             * Cooking Level
             * @description Cooking level.
             */
            cooking_level: number;
            /**
             * Cooking Total Xp
             * @description Cooking total xp.
             */
            cooking_total_xp: number;
            /**
             * Alchemy Level
             * @description Alchemy level.
             */
            alchemy_level: number;
            /**
             * Alchemy Total Xp
             * @description Alchemy total xp.
             */
            alchemy_total_xp: number;
            /**
             * Gold
             * @description The numbers of gold on this character.
             */
            gold: number;
        };
        /**
         * CharacterLeaderboardType
         * @enum {string}
         */
        CharacterLeaderboardType: "combat" | "woodcutting" | "mining" | "fishing" | "weaponcrafting" | "gearcrafting" | "jewelrycrafting" | "cooking" | "alchemy";
        "CharacterLeaderboardType_a-zA-Z0-9_-_____": components["schemas"]["CharacterLeaderboardType"];
        /** CharacterMovementDataSchema */
        CharacterMovementDataSchema: {
            /** @description Cooldown details */
            cooldown: components["schemas"]["CooldownSchema"];
            /** @description Destination details. */
            destination: components["schemas"]["MapSchema"];
            /** @description Character details. */
            character: components["schemas"]["CharacterSchema"];
        };
        /** CharacterMovementResponseSchema */
        CharacterMovementResponseSchema: {
            data: components["schemas"]["CharacterMovementDataSchema"];
        };
        /** CharacterResponseSchema */
        CharacterResponseSchema: {
            data: components["schemas"]["CharacterSchema"];
        };
        /** CharacterRestDataSchema */
        CharacterRestDataSchema: {
            /** @description Cooldown details */
            cooldown: components["schemas"]["CooldownSchema"];
            /**
             * Hp Restored
             * @description The amount of HP restored.
             */
            hp_restored: number;
            /** @description Character details. */
            character: components["schemas"]["CharacterSchema"];
        };
        /** CharacterRestResponseSchema */
        CharacterRestResponseSchema: {
            data: components["schemas"]["CharacterRestDataSchema"];
        };
        /** CharacterSchema */
        CharacterSchema: {
            /**
             * Name
             * @description Name of the character.
             */
            name: string;
            /**
             * Account
             * @description Account name.
             */
            account: string;
            /** @description Character skin code. */
            skin: components["schemas"]["CharacterSkin"];
            /**
             * Level
             * @description Combat level.
             */
            level: number;
            /**
             * Xp
             * @description The current xp level of the combat level.
             */
            xp: number;
            /**
             * Max Xp
             * @description XP required to level up the character.
             */
            max_xp: number;
            /**
             * Gold
             * @description The numbers of gold on this character.
             */
            gold: number;
            /**
             * Speed
             * @description *Not available, on the roadmap. Character movement speed.
             */
            speed: number;
            /**
             * Mining Level
             * @description Mining level.
             */
            mining_level: number;
            /**
             * Mining Xp
             * @description The current xp level of the Mining skill.
             */
            mining_xp: number;
            /**
             * Mining Max Xp
             * @description Mining XP required to level up the skill.
             */
            mining_max_xp: number;
            /**
             * Woodcutting Level
             * @description Woodcutting level.
             */
            woodcutting_level: number;
            /**
             * Woodcutting Xp
             * @description The current xp level of the Woodcutting skill.
             */
            woodcutting_xp: number;
            /**
             * Woodcutting Max Xp
             * @description Woodcutting XP required to level up the skill.
             */
            woodcutting_max_xp: number;
            /**
             * Fishing Level
             * @description Fishing level.
             */
            fishing_level: number;
            /**
             * Fishing Xp
             * @description The current xp level of the Fishing skill.
             */
            fishing_xp: number;
            /**
             * Fishing Max Xp
             * @description Fishing XP required to level up the skill.
             */
            fishing_max_xp: number;
            /**
             * Weaponcrafting Level
             * @description Weaponcrafting level.
             */
            weaponcrafting_level: number;
            /**
             * Weaponcrafting Xp
             * @description The current xp level of the Weaponcrafting skill.
             */
            weaponcrafting_xp: number;
            /**
             * Weaponcrafting Max Xp
             * @description Weaponcrafting XP required to level up the skill.
             */
            weaponcrafting_max_xp: number;
            /**
             * Gearcrafting Level
             * @description Gearcrafting level.
             */
            gearcrafting_level: number;
            /**
             * Gearcrafting Xp
             * @description The current xp level of the Gearcrafting skill.
             */
            gearcrafting_xp: number;
            /**
             * Gearcrafting Max Xp
             * @description Gearcrafting XP required to level up the skill.
             */
            gearcrafting_max_xp: number;
            /**
             * Jewelrycrafting Level
             * @description Jewelrycrafting level.
             */
            jewelrycrafting_level: number;
            /**
             * Jewelrycrafting Xp
             * @description The current xp level of the Jewelrycrafting skill.
             */
            jewelrycrafting_xp: number;
            /**
             * Jewelrycrafting Max Xp
             * @description Jewelrycrafting XP required to level up the skill.
             */
            jewelrycrafting_max_xp: number;
            /**
             * Cooking Level
             * @description The current xp level of the Cooking skill.
             */
            cooking_level: number;
            /**
             * Cooking Xp
             * @description Cooking XP.
             */
            cooking_xp: number;
            /**
             * Cooking Max Xp
             * @description Cooking XP required to level up the skill.
             */
            cooking_max_xp: number;
            /**
             * Alchemy Level
             * @description Alchemy level.
             */
            alchemy_level: number;
            /**
             * Alchemy Xp
             * @description Alchemy XP.
             */
            alchemy_xp: number;
            /**
             * Alchemy Max Xp
             * @description Alchemy XP required to level up the skill.
             */
            alchemy_max_xp: number;
            /**
             * Hp
             * @description Character actual HP.
             */
            hp: number;
            /**
             * Max Hp
             * @description Character max HP.
             */
            max_hp: number;
            /**
             * Haste
             * @description *Increase speed attack (reduce fight cooldown)
             */
            haste: number;
            /**
             * Critical Strike
             * @description % Critical strike. Critical strikes adds 50% extra damage to an attack (1.5x).
             */
            critical_strike: number;
            /**
             * Wisdom
             * @description Wisdom increases the amount of XP gained from fights and skills (1% extra per 10 wisdom).
             */
            wisdom: number;
            /**
             * Prospecting
             * @description Prospecting increases the chances of getting drops from fights and skills (1% extra per 10 PP).
             */
            prospecting: number;
            /**
             * Attack Fire
             * @description Fire attack.
             */
            attack_fire: number;
            /**
             * Attack Earth
             * @description Earth attack.
             */
            attack_earth: number;
            /**
             * Attack Water
             * @description Water attack.
             */
            attack_water: number;
            /**
             * Attack Air
             * @description Air attack.
             */
            attack_air: number;
            /**
             * Dmg
             * @description % Damage. Damage increases your attack in all elements.
             */
            dmg: number;
            /**
             * Dmg Fire
             * @description % Fire damage. Damage increases your fire attack.
             */
            dmg_fire: number;
            /**
             * Dmg Earth
             * @description % Earth damage. Damage increases your earth attack.
             */
            dmg_earth: number;
            /**
             * Dmg Water
             * @description % Water damage. Damage increases your water attack.
             */
            dmg_water: number;
            /**
             * Dmg Air
             * @description % Air damage. Damage increases your air attack.
             */
            dmg_air: number;
            /**
             * Res Fire
             * @description % Fire resistance. Reduces fire attack.
             */
            res_fire: number;
            /**
             * Res Earth
             * @description % Earth resistance. Reduces earth attack.
             */
            res_earth: number;
            /**
             * Res Water
             * @description % Water resistance. Reduces water attack.
             */
            res_water: number;
            /**
             * Res Air
             * @description % Air resistance. Reduces air attack.
             */
            res_air: number;
            /**
             * X
             * @description Character x coordinate.
             */
            x: number;
            /**
             * Y
             * @description Character y coordinate.
             */
            y: number;
            /**
             * Cooldown
             * @description Cooldown in seconds.
             */
            cooldown: number;
            /**
             * Cooldown Expiration
             * Format: date-time
             * @description Datetime Cooldown expiration.
             */
            cooldown_expiration?: string;
            /**
             * Weapon Slot
             * @description Weapon slot.
             */
            weapon_slot: string;
            /**
             * Rune Slot
             * @description Rune slot.
             */
            rune_slot: string;
            /**
             * Shield Slot
             * @description Shield slot.
             */
            shield_slot: string;
            /**
             * Helmet Slot
             * @description Helmet slot.
             */
            helmet_slot: string;
            /**
             * Body Armor Slot
             * @description Body armor slot.
             */
            body_armor_slot: string;
            /**
             * Leg Armor Slot
             * @description Leg armor slot.
             */
            leg_armor_slot: string;
            /**
             * Boots Slot
             * @description Boots slot.
             */
            boots_slot: string;
            /**
             * Ring1 Slot
             * @description Ring 1 slot.
             */
            ring1_slot: string;
            /**
             * Ring2 Slot
             * @description Ring 2 slot.
             */
            ring2_slot: string;
            /**
             * Amulet Slot
             * @description Amulet slot.
             */
            amulet_slot: string;
            /**
             * Artifact1 Slot
             * @description Artifact 1 slot.
             */
            artifact1_slot: string;
            /**
             * Artifact2 Slot
             * @description Artifact 2 slot.
             */
            artifact2_slot: string;
            /**
             * Artifact3 Slot
             * @description Artifact 3 slot.
             */
            artifact3_slot: string;
            /**
             * Utility1 Slot
             * @description Utility 1 slot.
             */
            utility1_slot: string;
            /**
             * Utility1 Slot Quantity
             * @description Utility 1 quantity.
             */
            utility1_slot_quantity: number;
            /**
             * Utility2 Slot
             * @description Utility 2 slot.
             */
            utility2_slot: string;
            /**
             * Utility2 Slot Quantity
             * @description Utility 2 quantity.
             */
            utility2_slot_quantity: number;
            /**
             * Bag Slot
             * @description Bag slot.
             */
            bag_slot: string;
            /**
             * Task
             * @description Task in progress.
             */
            task: string;
            /**
             * Task Type
             * @description Task type.
             */
            task_type: string;
            /**
             * Task Progress
             * @description Task progression.
             */
            task_progress: number;
            /**
             * Task Total
             * @description Task total objective.
             */
            task_total: number;
            /**
             * Inventory Max Items
             * @description Inventory max items.
             */
            inventory_max_items: number;
            /**
             * Inventory
             * @description List of inventory slots.
             */
            inventory?: components["schemas"]["InventorySlot"][];
        };
        /**
         * CharacterSkin
         * @enum {string}
         */
        CharacterSkin: "men1" | "men2" | "men3" | "women1" | "women2" | "women3" | "corrupted1" | "zombie1";
        /** CharactersListSchema */
        CharactersListSchema: {
            /**
             * Data
             * @description List of your characters.
             */
            data: components["schemas"]["CharacterSchema"][];
        };
        /**
         * ConditionOperator
         * @enum {string}
         */
        ConditionOperator: "eq" | "ne" | "gt" | "lt";
        /** ConditionSchema */
        ConditionSchema: {
            /**
             * Code
             * @description Condition code.
             */
            code: string;
            /** @description Condition operator. */
            operator: components["schemas"]["ConditionOperator"];
            /**
             * Value
             * @description Condition value.
             */
            value: number;
        };
        /** CooldownSchema */
        CooldownSchema: {
            /**
             * Total Seconds
             * @description The total seconds of the cooldown.
             */
            total_seconds: number;
            /**
             * Remaining Seconds
             * @description The remaining seconds of the cooldown.
             */
            remaining_seconds: number;
            /**
             * Started At
             * Format: date-time
             * @description The start of the cooldown.
             */
            started_at: string;
            /**
             * Expiration
             * Format: date-time
             * @description The expiration of the cooldown.
             */
            expiration: string;
            /** @description The reason of the cooldown. */
            reason: components["schemas"]["ActionType"];
        };
        /** CraftSchema */
        CraftSchema: {
            /**
             * Skill code
             * @description Skill required to craft the item.
             */
            skill?: components["schemas"]["CraftSkill"];
            /**
             * Level
             * @description The skill level required to craft the item.
             */
            level?: number;
            /**
             * Items
             * @description List of items required to craft the item.
             */
            items?: components["schemas"]["SimpleItemSchema"][];
            /**
             * Quantity
             * @description Quantity of items crafted.
             */
            quantity?: number;
        };
        /**
         * CraftSkill
         * @enum {string}
         */
        CraftSkill: "weaponcrafting" | "gearcrafting" | "jewelrycrafting" | "cooking" | "woodcutting" | "mining" | "alchemy";
        "CraftSkill_a-zA-Z0-9_-_____": components["schemas"]["CraftSkill"];
        /** CraftingSchema */
        CraftingSchema: {
            /**
             * Craft code
             * @description Craft code.
             */
            code: string;
            /**
             * Quantity
             * @description Quantity of items to craft.
             * @default 1
             */
            quantity: number;
        };
        /** DataPage[AccountAchievementSchema] */
        DataPage_AccountAchievementSchema_: {
            /** Data */
            data: components["schemas"]["AccountAchievementSchema"][];
            /** Total */
            total: number | null;
            /** Page */
            page: number | null;
            /** Size */
            size: number | null;
            /** Pages */
            pages?: number | null;
        };
        /** DataPage[AccountLeaderboardSchema] */
        DataPage_AccountLeaderboardSchema_: {
            /** Data */
            data: components["schemas"]["AccountLeaderboardSchema"][];
            /** Total */
            total: number | null;
            /** Page */
            page: number | null;
            /** Size */
            size: number | null;
            /** Pages */
            pages?: number | null;
        };
        /** DataPage[AchievementSchema] */
        DataPage_AchievementSchema_: {
            /** Data */
            data: components["schemas"]["AchievementSchema"][];
            /** Total */
            total: number | null;
            /** Page */
            page: number | null;
            /** Size */
            size: number | null;
            /** Pages */
            pages?: number | null;
        };
        /** DataPage[ActiveEventSchema] */
        DataPage_ActiveEventSchema_: {
            /** Data */
            data: components["schemas"]["ActiveEventSchema"][];
            /** Total */
            total: number | null;
            /** Page */
            page: number | null;
            /** Size */
            size: number | null;
            /** Pages */
            pages?: number | null;
        };
        /** DataPage[BadgeSchema] */
        DataPage_BadgeSchema_: {
            /** Data */
            data: components["schemas"]["BadgeSchema"][];
            /** Total */
            total: number | null;
            /** Page */
            page: number | null;
            /** Size */
            size: number | null;
            /** Pages */
            pages?: number | null;
        };
        /** DataPage[CharacterLeaderboardSchema] */
        DataPage_CharacterLeaderboardSchema_: {
            /** Data */
            data: components["schemas"]["CharacterLeaderboardSchema"][];
            /** Total */
            total: number | null;
            /** Page */
            page: number | null;
            /** Size */
            size: number | null;
            /** Pages */
            pages?: number | null;
        };
        /** DataPage[DropRateSchema] */
        DataPage_DropRateSchema_: {
            /** Data */
            data: components["schemas"]["DropRateSchema"][];
            /** Total */
            total: number | null;
            /** Page */
            page: number | null;
            /** Size */
            size: number | null;
            /** Pages */
            pages?: number | null;
        };
        /** DataPage[EffectSchema] */
        DataPage_EffectSchema_: {
            /** Data */
            data: components["schemas"]["EffectSchema"][];
            /** Total */
            total: number | null;
            /** Page */
            page: number | null;
            /** Size */
            size: number | null;
            /** Pages */
            pages?: number | null;
        };
        /** DataPage[EventSchema] */
        DataPage_EventSchema_: {
            /** Data */
            data: components["schemas"]["EventSchema"][];
            /** Total */
            total: number | null;
            /** Page */
            page: number | null;
            /** Size */
            size: number | null;
            /** Pages */
            pages?: number | null;
        };
        /** DataPage[GEOrderSchema] */
        DataPage_GEOrderSchema_: {
            /** Data */
            data: components["schemas"]["GEOrderSchema"][];
            /** Total */
            total: number | null;
            /** Page */
            page: number | null;
            /** Size */
            size: number | null;
            /** Pages */
            pages?: number | null;
        };
        /** DataPage[GeOrderHistorySchema] */
        DataPage_GeOrderHistorySchema_: {
            /** Data */
            data: components["schemas"]["GeOrderHistorySchema"][];
            /** Total */
            total: number | null;
            /** Page */
            page: number | null;
            /** Size */
            size: number | null;
            /** Pages */
            pages?: number | null;
        };
        /** DataPage[ItemSchema] */
        DataPage_ItemSchema_: {
            /** Data */
            data: components["schemas"]["ItemSchema"][];
            /** Total */
            total: number | null;
            /** Page */
            page: number | null;
            /** Size */
            size: number | null;
            /** Pages */
            pages?: number | null;
        };
        /** DataPage[LogSchema] */
        DataPage_LogSchema_: {
            /** Data */
            data: components["schemas"]["LogSchema"][];
            /** Total */
            total: number | null;
            /** Page */
            page: number | null;
            /** Size */
            size: number | null;
            /** Pages */
            pages?: number | null;
        };
        /** DataPage[MapSchema] */
        DataPage_MapSchema_: {
            /** Data */
            data: components["schemas"]["MapSchema"][];
            /** Total */
            total: number | null;
            /** Page */
            page: number | null;
            /** Size */
            size: number | null;
            /** Pages */
            pages?: number | null;
        };
        /** DataPage[MonsterSchema] */
        DataPage_MonsterSchema_: {
            /** Data */
            data: components["schemas"]["MonsterSchema"][];
            /** Total */
            total: number | null;
            /** Page */
            page: number | null;
            /** Size */
            size: number | null;
            /** Pages */
            pages?: number | null;
        };
        /** DataPage[NPCItem] */
        DataPage_NPCItem_: {
            /** Data */
            data: components["schemas"]["NPCItem"][];
            /** Total */
            total: number | null;
            /** Page */
            page: number | null;
            /** Size */
            size: number | null;
            /** Pages */
            pages?: number | null;
        };
        /** DataPage[NPCSchema] */
        DataPage_NPCSchema_: {
            /** Data */
            data: components["schemas"]["NPCSchema"][];
            /** Total */
            total: number | null;
            /** Page */
            page: number | null;
            /** Size */
            size: number | null;
            /** Pages */
            pages?: number | null;
        };
        /** DataPage[ResourceSchema] */
        DataPage_ResourceSchema_: {
            /** Data */
            data: components["schemas"]["ResourceSchema"][];
            /** Total */
            total: number | null;
            /** Page */
            page: number | null;
            /** Size */
            size: number | null;
            /** Pages */
            pages?: number | null;
        };
        /** DataPage[SimpleItemSchema] */
        DataPage_SimpleItemSchema_: {
            /** Data */
            data: components["schemas"]["SimpleItemSchema"][];
            /** Total */
            total: number | null;
            /** Page */
            page: number | null;
            /** Size */
            size: number | null;
            /** Pages */
            pages?: number | null;
        };
        /** DataPage[TaskFullSchema] */
        DataPage_TaskFullSchema_: {
            /** Data */
            data: components["schemas"]["TaskFullSchema"][];
            /** Total */
            total: number | null;
            /** Page */
            page: number | null;
            /** Size */
            size: number | null;
            /** Pages */
            pages?: number | null;
        };
        /** DeleteCharacterSchema */
        DeleteCharacterSchema: {
            /**
             * Name
             * @description Character name.
             */
            name: string;
        };
        /** DeleteItemResponseSchema */
        DeleteItemResponseSchema: {
            data: components["schemas"]["DeleteItemSchema"];
        };
        /** DeleteItemSchema */
        DeleteItemSchema: {
            /** @description Cooldown details. */
            cooldown: components["schemas"]["CooldownSchema"];
            /** @description Item details. */
            item: components["schemas"]["SimpleItemSchema"];
            /** @description Player details. */
            character: components["schemas"]["CharacterSchema"];
        };
        /** DepositWithdrawGoldSchema */
        DepositWithdrawGoldSchema: {
            /**
             * Quantity
             * @description Quantity of gold.
             */
            quantity: number;
        };
        /** DestinationSchema */
        DestinationSchema: {
            /**
             * X
             * @description The x coordinate of the destination.
             */
            x: number;
            /**
             * Y
             * @description The y coordinate of the destination.
             */
            y: number;
        };
        /** DropRateSchema */
        DropRateSchema: {
            /**
             * Item code
             * @description Item code.
             */
            code: string;
            /**
             * Rate
             * @description Chance rate. (1/rate)
             */
            rate: number;
            /**
             * Min Quantity
             * @description Minimum quantity.
             */
            min_quantity: number;
            /**
             * Max Quantity
             * @description Maximum quantity.
             */
            max_quantity: number;
        };
        /** DropSchema */
        DropSchema: {
            /**
             * Code
             * @description The code of the item.
             */
            code: string;
            /**
             * Quantity
             * @description The quantity of the item.
             */
            quantity: number;
        };
        /** EffectResponseSchema */
        EffectResponseSchema: {
            data: components["schemas"]["EffectSchema"];
        };
        /** EffectSchema */
        EffectSchema: {
            /**
             * Name
             * @description Name of the effect.
             */
            name: string;
            /**
             * Code
             * @description The code of the effect. This is the effect's unique identifier (ID).
             */
            code: string;
            /**
             * Description
             * @description Description of the effect. This is a brief description of the effect.
             */
            description: string;
            /** @description Type of the effect. */
            type: components["schemas"]["EffectType"];
            /** @description Subtype of the effect. */
            subtype: components["schemas"]["EffectSubtype"];
        };
        /**
         * EffectSubtype
         * @enum {string}
         */
        EffectSubtype: "stat" | "other" | "heal" | "buff" | "debuff" | "special" | "gathering" | "teleport" | "gold";
        /**
         * EffectType
         * @enum {string}
         */
        EffectType: "equipment" | "consumable" | "combat";
        /** EquipRequestSchema */
        EquipRequestSchema: {
            /** @description Cooldown details. */
            cooldown: components["schemas"]["CooldownSchema"];
            /** @description Item slot. */
            slot: components["schemas"]["ItemSlot"];
            /** @description Item details. */
            item: components["schemas"]["ItemSchema"];
            /** @description Player details. */
            character: components["schemas"]["CharacterSchema"];
        };
        /** EquipSchema */
        EquipSchema: {
            /**
             * Code
             * @description Item code.
             */
            code: string;
            /** @description Item slot. */
            slot: components["schemas"]["ItemSlot"];
            /**
             * Quantity
             * @description Item quantity. Applicable to utilities only.
             * @default 1
             */
            quantity: number;
        };
        /** EquipmentResponseSchema */
        EquipmentResponseSchema: {
            data: components["schemas"]["EquipRequestSchema"];
        };
        /** EventContentSchema */
        EventContentSchema: {
            /** @description Type of the event. */
            type: components["schemas"]["MapContentType"];
            /**
             * Code
             * @description Code content.
             */
            code: string;
        };
        /** EventMapSchema */
        EventMapSchema: {
            /**
             * X
             * @description Position X of the map.
             */
            x: number;
            /**
             * Y
             * @description Position Y of the map.
             */
            y: number;
            /**
             * Skin
             * @description Map skin of the map
             */
            skin: string;
        };
        /** EventSchema */
        EventSchema: {
            /**
             * Name
             * @description Name of the event.
             */
            name: string;
            /**
             * Code
             * @description Code of the event.
             */
            code: string;
            /** @description Content of the event. */
            content: components["schemas"]["EventContentSchema"];
            /**
             * Maps
             * @description Map list of the event.
             */
            maps: components["schemas"]["EventMapSchema"][];
            /**
             * Duration
             * @description Duration in minutes.
             */
            duration: number;
            /**
             * Rate
             * @description Rate spawn of the event. (1/rate every minute)
             */
            rate: number;
        };
        /**
         * FightResult
         * @enum {string}
         */
        FightResult: "win" | "loss";
        /** FightSchema */
        FightSchema: {
            /**
             * Xp
             * @description The amount of xp gained from the fight.
             */
            xp: number;
            /**
             * Gold
             * @description The amount of gold gained from the fight.
             */
            gold: number;
            /**
             * Drops
             * @description The items dropped from the fight.
             */
            drops: components["schemas"]["DropSchema"][];
            /**
             * Turns
             * @description Numbers of the turns of the combat.
             */
            turns: number;
            /**
             * Logs
             * @description The fight logs.
             */
            logs: string[];
            /** @description The result of the fight. */
            result: components["schemas"]["FightResult"];
        };
        /** GEBuyOrderSchema */
        GEBuyOrderSchema: {
            /**
             * Id
             * @description Order id.
             */
            id: string;
            /**
             * Quantity
             * @description Item quantity.
             */
            quantity: number;
        };
        /** GECancelOrderSchema */
        GECancelOrderSchema: {
            /**
             * Id
             * @description Order id.
             */
            id: string;
        };
        /** GECreateOrderTransactionResponseSchema */
        GECreateOrderTransactionResponseSchema: {
            data: components["schemas"]["GEOrderTransactionSchema"];
        };
        /** GEOrderCreatedSchema */
        GEOrderCreatedSchema: {
            /**
             * Id
             * @description Order id.
             */
            id: string;
            /**
             * Created At
             * Format: date-time
             * @description Order created at.
             */
            created_at: string;
            /**
             * Code
             * @description Item code.
             */
            code: string;
            /**
             * Quantity
             * @description Item quantity.
             */
            quantity: number;
            /**
             * Price
             * @description Item price per unit.
             */
            price: number;
            /**
             * Total Price
             * @description Total price.
             */
            total_price: number;
            /**
             * Tax
             * @description Listing tax (3%, minimum 1)
             */
            tax: number;
        };
        /** GEOrderCreationrSchema */
        GEOrderCreationrSchema: {
            /**
             * Code
             * @description Item code.
             */
            code: string;
            /**
             * Quantity
             * @description Item quantity.
             */
            quantity: number;
            /**
             * Price
             * @description Item price per unit.
             */
            price: number;
        };
        /** GEOrderReponseSchema */
        GEOrderReponseSchema: {
            data: components["schemas"]["GEOrderSchema"];
        };
        /** GEOrderSchema */
        GEOrderSchema: {
            /**
             * Id
             * @description Order id.
             */
            id: string;
            /**
             * Seller
             * @description Seller account name.
             */
            seller: string;
            /**
             * Code
             * @description Item code.
             */
            code: string;
            /**
             * Quantity
             * @description Item quantity.
             */
            quantity: number;
            /**
             * Price
             * @description Item price per unit.
             */
            price: number;
            /**
             * Created At
             * Format: date-time
             * @description Order created at.
             */
            created_at: string;
        };
        /** GEOrderTransactionSchema */
        GEOrderTransactionSchema: {
            /** @description Cooldown details. */
            cooldown: components["schemas"]["CooldownSchema"];
            /** @description Order details. */
            order: components["schemas"]["GEOrderCreatedSchema"];
            /** @description Character details. */
            character: components["schemas"]["CharacterSchema"];
        };
        /** GETransactionListSchema */
        GETransactionListSchema: {
            /** @description Cooldown details. */
            cooldown: components["schemas"]["CooldownSchema"];
            /** @description Transaction details. */
            order: components["schemas"]["GETransactionSchema"];
            /** @description Character details. */
            character: components["schemas"]["CharacterSchema"];
        };
        /** GETransactionResponseSchema */
        GETransactionResponseSchema: {
            data: components["schemas"]["GETransactionListSchema"];
        };
        /** GETransactionSchema */
        GETransactionSchema: {
            /**
             * Id
             * @description Order id.
             */
            id: string;
            /**
             * Code
             * @description Item code.
             */
            code: string;
            /**
             * Quantity
             * @description Item quantity.
             */
            quantity: number;
            /**
             * Price
             * @description Item price.
             */
            price: number;
            /**
             * Total Price
             * @description Total price of the transaction.
             */
            total_price: number;
        };
        /**
         * GatheringSkill
         * @enum {string}
         */
        GatheringSkill: "mining" | "woodcutting" | "fishing" | "alchemy";
        "GatheringSkill_a-zA-Z0-9_-_____": components["schemas"]["GatheringSkill"];
        /** GeOrderHistorySchema */
        GeOrderHistorySchema: {
            /**
             * Order Id
             * @description Order id.
             */
            order_id: string;
            /**
             * Seller
             * @description Seller account name.
             */
            seller: string;
            /**
             * Buyer
             * @description Buyer account name.
             */
            buyer: string;
            /**
             * Code
             * @description Item code.
             */
            code: string;
            /**
             * Quantity
             * @description Item quantity.
             */
            quantity: number;
            /**
             * Price
             * @description Item price per unit.
             */
            price: number;
            /**
             * Sold At
             * Format: date-time
             * @description Sale datetime.
             */
            sold_at: string;
        };
        /** GiveGoldDataSchema */
        GiveGoldDataSchema: {
            /** @description Cooldown details. */
            cooldown: components["schemas"]["CooldownSchema"];
            /**
             * Quantity
             * @description Quantity of gold given.
             */
            quantity: number;
            /** @description Character details of the receiving character. */
            receiver_character: components["schemas"]["CharacterSchema"];
            /** @description Character details. */
            character: components["schemas"]["CharacterSchema"];
        };
        /** GiveGoldReponseSchema */
        GiveGoldReponseSchema: {
            data: components["schemas"]["GiveGoldDataSchema"];
        };
        /** GiveGoldSchema */
        GiveGoldSchema: {
            /**
             * Quantity
             * @description Gold quantity.
             */
            quantity: number;
            /**
             * Character
             * @description Character name. The name of the character who will receive the gold.
             */
            character: string;
        };
        /** GiveItemDataSchema */
        GiveItemDataSchema: {
            /** @description Cooldown details. */
            cooldown: components["schemas"]["CooldownSchema"];
            /**
             * Items
             * @description Items given.
             */
            items: components["schemas"]["SimpleItemSchema"][];
            /** @description Character details of the receiving character. */
            receiver_character: components["schemas"]["CharacterSchema"];
            /** @description Character details of the sending character. */
            character: components["schemas"]["CharacterSchema"];
        };
        /** GiveItemReponseSchema */
        GiveItemReponseSchema: {
            data: components["schemas"]["GiveItemDataSchema"];
        };
        /** GiveItemsSchema */
        GiveItemsSchema: {
            /**
             * Items
             * @description List of items to give
             */
            items: components["schemas"]["SimpleItemSchema"][];
            /**
             * Character
             * @description Character name. The name of the character who will receive the items.
             */
            character: string;
        };
        /** GoldSchema */
        GoldSchema: {
            /**
             * Quantity
             * @description Quantity of gold.
             */
            quantity: number;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** InventorySlot */
        InventorySlot: {
            /**
             * Slot
             * @description Inventory slot identifier.
             */
            slot: number;
            /**
             * Code
             * @description Item code.
             */
            code: string;
            /**
             * Quantity
             * @description Quantity in the slot.
             */
            quantity: number;
        };
        /** ItemResponseSchema */
        ItemResponseSchema: {
            data: components["schemas"]["ItemSchema"];
        };
        /** ItemSchema */
        ItemSchema: {
            /**
             * Name
             * @description Item name.
             */
            name: string;
            /**
             * Code
             * @description Item code. This is the item's unique identifier (ID).
             */
            code: string;
            /**
             * Level
             * @description Item level.
             */
            level: number;
            /**
             * Type
             * @description Item type.
             */
            type: string;
            /**
             * Subtype
             * @description Item subtype.
             */
            subtype: string;
            /**
             * Description
             * @description Item description.
             */
            description: string;
            /**
             * Conditions
             * @description Item conditions. If applicable. Conditions for using or equipping the item.
             */
            conditions?: components["schemas"]["ConditionSchema"][];
            /**
             * Effects
             * @description List of object effects. For equipment, it will include item stats.
             */
            effects?: components["schemas"]["SimpleEffectSchema"][];
            /** @description Craft information. If applicable. */
            craft?: components["schemas"]["CraftSchema"] | null;
            /**
             * Tradeable
             * @description Item tradeable status. A non-tradeable item cannot be exchanged or sold.
             */
            tradeable: boolean;
        };
        /**
         * ItemSlot
         * @enum {string}
         */
        ItemSlot: "weapon" | "shield" | "helmet" | "body_armor" | "leg_armor" | "boots" | "ring1" | "ring2" | "amulet" | "artifact1" | "artifact2" | "artifact3" | "utility1" | "utility2" | "bag" | "rune";
        /**
         * ItemType
         * @enum {string}
         */
        ItemType: "utility" | "body_armor" | "weapon" | "resource" | "leg_armor" | "helmet" | "boots" | "shield" | "amulet" | "ring" | "artifact" | "currency" | "consumable" | "rune" | "bag";
        "ItemType_a-zA-Z0-9_-_____": components["schemas"]["ItemType"];
        /** LogSchema */
        LogSchema: {
            /**
             * Character
             * @description Character name.
             */
            character: string;
            /**
             * Account
             * @description Account character.
             */
            account: string;
            /** @description Type of action. */
            type: components["schemas"]["LogType"];
            /**
             * Description
             * @description Description of action.
             */
            description: string;
            /**
             * Content
             * @description Content of action.
             */
            content: unknown;
            /**
             * Cooldown
             * @description Cooldown in seconds.
             */
            cooldown: number;
            /**
             * Cooldown Expiration
             * @description Datetime of cooldown expiration.
             */
            cooldown_expiration: string | null;
            /**
             * Created At
             * Format: date-time
             * @description Datetime of creation.
             */
            created_at: string;
        };
        /**
         * LogType
         * @enum {string}
         */
        LogType: "spawn" | "movement" | "fight" | "crafting" | "gathering" | "buy_ge" | "sell_ge" | "buy_npc" | "sell_npc" | "cancel_ge" | "delete_item" | "deposit_item" | "withdraw_item" | "deposit_gold" | "withdraw_gold" | "equip" | "unequip" | "new_task" | "task_exchange" | "task_cancelled" | "task_completed" | "task_trade" | "christmas_exchange" | "recycling" | "rest" | "use" | "buy_bank_expansion" | "achievement" | "give_item" | "give_gold" | "receive_item" | "receive_gold" | "change_skin" | "rename";
        /** MapContentSchema */
        MapContentSchema: {
            /** @description Type of the content. */
            type: components["schemas"]["MapContentType"];
            /**
             * Code
             * @description Code of the content.
             */
            code: string;
        };
        /**
         * MapContentType
         * @enum {string}
         */
        MapContentType: "monster" | "resource" | "workshop" | "bank" | "grand_exchange" | "tasks_master" | "npc";
        "MapContentType_a-zA-Z0-9_-_____": components["schemas"]["MapContentType"];
        /** MapResponseSchema */
        MapResponseSchema: {
            data: components["schemas"]["MapSchema"];
        };
        /** MapSchema */
        MapSchema: {
            /**
             * Name
             * @description Name of the map.
             */
            name: string;
            /**
             * Skin
             * @description Skin of the map.
             */
            skin: string;
            /**
             * X
             * @description Position X of the map.
             */
            x: number;
            /**
             * Y
             * @description Position Y of the map.
             */
            y: number;
            /** @description Content of the map. */
            content: components["schemas"]["MapContentSchema"] | null;
        };
        /** MonsterResponseSchema */
        MonsterResponseSchema: {
            data: components["schemas"]["MonsterSchema"];
        };
        /** MonsterSchema */
        MonsterSchema: {
            /**
             * Name
             * @description Name of the monster.
             */
            name: string;
            /**
             * Code
             * @description The code of the monster. This is the monster's unique identifier (ID).
             */
            code: string;
            /**
             * Level
             * @description Monster level.
             */
            level: number;
            /**
             * Hp
             * @description Monster hit points.
             */
            hp: number;
            /**
             * Attack Fire
             * @description Monster fire attack.
             */
            attack_fire: number;
            /**
             * Attack Earth
             * @description Monster earth attack.
             */
            attack_earth: number;
            /**
             * Attack Water
             * @description Monster water attack.
             */
            attack_water: number;
            /**
             * Attack Air
             * @description Monster air attack.
             */
            attack_air: number;
            /**
             * Res Fire
             * @description Monster % fire resistance.
             */
            res_fire: number;
            /**
             * Res Earth
             * @description Monster % earth resistance.
             */
            res_earth: number;
            /**
             * Res Water
             * @description Monster % water resistance.
             */
            res_water: number;
            /**
             * Res Air
             * @description Monster % air resistance.
             */
            res_air: number;
            /**
             * Critical Strike
             * @description Monster % critical strike.
             */
            critical_strike: number;
            /**
             * Effects
             * @description List of effects.
             */
            effects?: components["schemas"]["SimpleEffectSchema"][];
            /**
             * Min Gold
             * @description Monster minimum gold drop.
             */
            min_gold: number;
            /**
             * Max Gold
             * @description Monster maximum gold drop.
             */
            max_gold: number;
            /**
             * Drops
             * @description Monster drops. This is a list of items that the monster drops after killing the monster.
             */
            drops: components["schemas"]["DropRateSchema"][];
        };
        /** MyAccountDetails */
        MyAccountDetails: {
            /**
             * Username
             * @description Username.
             */
            username: string;
            /**
             * Email
             * Format: email
             * @description Email.
             */
            email: string;
            /**
             * Member
             * @description Member status.
             */
            member: boolean;
            /**
             * Member Expiration
             * @description Member expiration date.
             */
            member_expiration?: string | null;
            /** @description Account status. */
            status: components["schemas"]["AccountStatus"];
            /**
             * Badges
             * @description Account badges.
             */
            badges?: unknown[];
            /**
             * Skins
             * @description Skins owned.
             */
            skins: unknown[];
            /**
             * Gems
             * @description Gems.
             */
            gems: number;
            /**
             * Achievements Points
             * @description Achievement points.
             */
            achievements_points: number;
            /**
             * Banned
             * @description Banned.
             */
            banned: boolean;
            /**
             * Ban Reason
             * @description Ban reason.
             */
            ban_reason?: string;
        };
        /** MyAccountDetailsSchema */
        MyAccountDetailsSchema: {
            data: components["schemas"]["MyAccountDetails"];
        };
        /** MyCharactersListSchema */
        MyCharactersListSchema: {
            /**
             * Data
             * @description List of your characters.
             */
            data: components["schemas"]["CharacterSchema"][];
        };
        /** NPCItem */
        NPCItem: {
            /**
             * Code
             * @description The code of the NPC. This is the NPC's unique identifier (ID).
             */
            code: string;
            /**
             * Npc
             * @description Code of the NPC that sells/buys the item.
             */
            npc: string;
            /**
             * Currency
             * @description Currency used to buy/sell the item. If it's not gold, it's the item code.
             */
            currency: string;
            /**
             * Buy Price
             * @description Price to buy the item.
             */
            buy_price: number | null;
            /**
             * Sell Price
             * @description Price to sell the item.
             */
            sell_price: number | null;
        };
        /** NPCResponseSchema */
        NPCResponseSchema: {
            data: components["schemas"]["NPCSchema"];
        };
        /** NPCSchema */
        NPCSchema: {
            /**
             * Name
             * @description Name of the NPC.
             */
            name: string;
            /**
             * Code
             * @description The code of the NPC. This is the NPC's unique identifier (ID).
             */
            code: string;
            /**
             * Description
             * @description Description of the NPC.
             */
            description: string;
            /** @description Type of the NPC. */
            type: components["schemas"]["NPCType"];
        };
        /**
         * NPCType
         * @enum {string}
         */
        NPCType: "merchant" | "trader";
        "NPCType_a-zA-Z0-9_-_____": components["schemas"]["NPCType"];
        /** NpcItemTransactionSchema */
        NpcItemTransactionSchema: {
            /**
             * Code
             * @description Item code.
             */
            code: string;
            /**
             * Quantity
             * @description Item quantity.
             */
            quantity: number;
            /**
             * Currency
             * @description Currency used for the transaction.
             */
            currency: string;
            /**
             * Price
             * @description Item price.
             */
            price: number;
            /**
             * Total Price
             * @description Total price of the transaction.
             */
            total_price: number;
        };
        /** NpcMerchantBuySchema */
        NpcMerchantBuySchema: {
            /**
             * Code
             * @description Item code.
             */
            code: string;
            /**
             * Quantity
             * @description Item quantity.
             */
            quantity: number;
        };
        /** NpcMerchantTransactionResponseSchema */
        NpcMerchantTransactionResponseSchema: {
            data: components["schemas"]["NpcMerchantTransactionSchema"];
        };
        /** NpcMerchantTransactionSchema */
        NpcMerchantTransactionSchema: {
            /** @description Cooldown details. */
            cooldown: components["schemas"]["CooldownSchema"];
            /** @description Transaction details. */
            transaction: components["schemas"]["NpcItemTransactionSchema"];
            /** @description Character details. */
            character: components["schemas"]["CharacterSchema"];
        };
        /** PasswordResetConfirmSchema */
        PasswordResetConfirmSchema: {
            /**
             * Token
             * @description Password reset token.
             */
            token: string;
            /**
             * New Password
             * @description Your new password.
             */
            new_password: string;
        };
        /** PasswordResetRequestSchema */
        PasswordResetRequestSchema: {
            /**
             * Email
             * Format: email
             * @description Your email address.
             */
            email: string;
        };
        /** PasswordResetResponseSchema */
        PasswordResetResponseSchema: {
            /**
             * Message
             * @description Success message.
             */
            message: string;
        };
        /** RateLimitSchema */
        RateLimitSchema: {
            /**
             * Type
             * @description Type of rate limit.
             */
            type: string;
            /**
             * Value
             * @description Value of the rate limit.
             */
            value: string;
        };
        /** RecyclingDataSchema */
        RecyclingDataSchema: {
            /** @description Cooldown details. */
            cooldown: components["schemas"]["CooldownSchema"];
            /** @description Craft details. */
            details: components["schemas"]["RecyclingItemsSchema"];
            /** @description Player details. */
            character: components["schemas"]["CharacterSchema"];
        };
        /** RecyclingItemsSchema */
        RecyclingItemsSchema: {
            /**
             * Items
             * @description Objects received.
             */
            items: components["schemas"]["DropSchema"][];
        };
        /** RecyclingResponseSchema */
        RecyclingResponseSchema: {
            data: components["schemas"]["RecyclingDataSchema"];
        };
        /** RecyclingSchema */
        RecyclingSchema: {
            /**
             * Item code
             * @description Item code.
             */
            code: string;
            /**
             * Quantity
             * @description Quantity of items to recycle.
             * @default 1
             */
            quantity: number;
        };
        /** ResourceResponseSchema */
        ResourceResponseSchema: {
            data: components["schemas"]["ResourceSchema"];
        };
        /** ResourceSchema */
        ResourceSchema: {
            /**
             * Name
             * @description The name of the resource
             */
            name: string;
            /**
             * Code
             * @description The code of the resource. This is the resource's unique identifier (ID).
             */
            code: string;
            /**
             * Skill code
             * @description The skill required to gather this resource.
             */
            skill: components["schemas"]["GatheringSkill"];
            /**
             * Level
             * @description The skill level required to gather this resource.
             */
            level: number;
            /**
             * Drops
             * @description The drops of this resource.
             */
            drops: components["schemas"]["DropRateSchema"][];
        };
        /** ResponseSchema */
        ResponseSchema: {
            /** Message */
            message: string;
        };
        /** RewardDataResponseSchema */
        RewardDataResponseSchema: {
            data: components["schemas"]["RewardDataSchema"];
        };
        /** RewardDataSchema */
        RewardDataSchema: {
            /** @description Cooldown details. */
            cooldown: components["schemas"]["CooldownSchema"];
            /** @description Reward details. */
            rewards: components["schemas"]["RewardsSchema"];
            /** @description Player details. */
            character: components["schemas"]["CharacterSchema"];
        };
        /** RewardResponseSchema */
        RewardResponseSchema: {
            data: components["schemas"]["DropRateSchema"];
        };
        /** RewardsSchema */
        RewardsSchema: {
            /**
             * Items
             * @description Items rewards.
             */
            items: components["schemas"]["SimpleItemSchema"][];
            /**
             * Gold
             * @description Gold rewards.
             */
            gold: number;
        };
        /** SeasonBadgeSchema */
        SeasonBadgeSchema: {
            /**
             * Code
             * @description Badge code.
             */
            code: string;
            /**
             * Description
             * @description Badge description.
             */
            description: string;
            /**
             * Required Points
             * @description Required achievement points to earn the badge.
             */
            required_points: number;
        };
        /** SeasonSchema */
        SeasonSchema: {
            /**
             * Name
             * @description Season name.
             */
            name?: string;
            /**
             * Number
             * @description Season number.
             */
            number?: number;
            /**
             * Start Date
             * Format: date-time
             * @description Season start date.
             */
            start_date?: string;
            /**
             * Badges
             * @description Season badges with required achievement points.
             */
            badges: components["schemas"]["SeasonBadgeSchema"][];
            /**
             * Skins
             * @description Season skins with required achievement points.
             */
            skins: components["schemas"]["SeasonSkinSchema"][];
        };
        /** SeasonSkinSchema */
        SeasonSkinSchema: {
            /**
             * Code
             * @description Skin code.
             */
            code: string;
            /**
             * Description
             * @description Skin description.
             */
            description: string;
            /**
             * Required Points
             * @description Required achievement points to earn the skin.
             */
            required_points: number;
        };
        /** SimpleEffectSchema */
        SimpleEffectSchema: {
            /**
             * Code
             * @description Effect code.
             */
            code: string;
            /**
             * Value
             * @description Effect value.
             */
            value: number;
            /**
             * Description
             * @description Description of the effect.
             */
            description: string;
        };
        /** SimpleItemSchema */
        SimpleItemSchema: {
            /**
             * Code
             * @description Item code.
             */
            code: string;
            /**
             * Quantity
             * @description Item quantity.
             */
            quantity: number;
        };
        /**
         * Skill
         * @enum {string}
         */
        Skill: "weaponcrafting" | "gearcrafting" | "jewelrycrafting" | "cooking" | "woodcutting" | "mining" | "alchemy" | "fishing";
        /** SkillDataSchema */
        SkillDataSchema: {
            /** @description Cooldown details. */
            cooldown: components["schemas"]["CooldownSchema"];
            /** @description Craft details. */
            details: components["schemas"]["SkillInfoSchema"];
            /** @description Player details. */
            character: components["schemas"]["CharacterSchema"];
        };
        /** SkillInfoSchema */
        SkillInfoSchema: {
            /**
             * Xp
             * @description The amount of xp gained.
             */
            xp: number;
            /**
             * Items
             * @description Objects received.
             */
            items: components["schemas"]["DropSchema"][];
        };
        /** SkillResponseSchema */
        SkillResponseSchema: {
            data: components["schemas"]["SkillDataSchema"];
        };
        "Skill_a-zA-Z0-9_-_____": components["schemas"]["Skill"];
        /** StatusResponseSchema */
        StatusResponseSchema: {
            data: components["schemas"]["StatusSchema"];
        };
        /** StatusSchema */
        StatusSchema: {
            /**
             * Version
             * @description Game version.
             */
            version: string;
            /**
             * Server Time
             * Format: date-time
             * @description Server time.
             */
            server_time: string;
            /**
             * Max Level
             * @description Maximum level.
             */
            max_level: number;
            /**
             * Max Skill Level
             * @description Maximum skill level.
             */
            max_skill_level: number;
            /**
             * Characters Online
             * @description Characters online.
             */
            characters_online: number;
            /** @description Current season details. */
            season?: components["schemas"]["SeasonSchema"];
            /**
             * Announcements
             * @description Server announcements.
             */
            announcements: components["schemas"]["AnnouncementSchema"][];
            /**
             * Rate Limits
             * @description Rate limits.
             */
            rate_limits: components["schemas"]["RateLimitSchema"][];
        };
        /** TaskCancelledResponseSchema */
        TaskCancelledResponseSchema: {
            data: components["schemas"]["TaskCancelledSchema"];
        };
        /** TaskCancelledSchema */
        TaskCancelledSchema: {
            /** @description Cooldown details. */
            cooldown: components["schemas"]["CooldownSchema"];
            /** @description Player details. */
            character: components["schemas"]["CharacterSchema"];
        };
        /** TaskDataSchema */
        TaskDataSchema: {
            /** @description Cooldown details. */
            cooldown: components["schemas"]["CooldownSchema"];
            /** @description Task details. */
            task: components["schemas"]["TaskSchema"];
            /** @description Player details. */
            character: components["schemas"]["CharacterSchema"];
        };
        /** TaskFullResponseSchema */
        TaskFullResponseSchema: {
            data: components["schemas"]["TaskFullSchema"];
        };
        /** TaskFullSchema */
        TaskFullSchema: {
            /**
             * Code
             * @description Task objective.
             */
            code: string;
            /**
             * Level
             * @description Task level.
             */
            level: number;
            /**
             * Type
             * @description The type of task.
             */
            type: components["schemas"]["TaskType"];
            /**
             * Min Quantity
             * @description Minimum amount of task.
             */
            min_quantity: number;
            /**
             * Max Quantity
             * @description Maximum amount of task.
             */
            max_quantity: number;
            /**
             * Skill
             * @description Skill required to complete the task.
             */
            skill: string | null;
            /** @description Rewards. */
            rewards: components["schemas"]["RewardsSchema"];
        };
        /** TaskResponseSchema */
        TaskResponseSchema: {
            data: components["schemas"]["TaskDataSchema"];
        };
        /** TaskSchema */
        TaskSchema: {
            /**
             * Code
             * @description Task objective.
             */
            code: string;
            /**
             * Type
             * @description The type of task.
             */
            type: components["schemas"]["TaskType"];
            /**
             * Total
             * @description The total required to complete the task.
             */
            total: number;
            /** @description Rewards for completing the task. */
            rewards: components["schemas"]["RewardsSchema"];
        };
        /** TaskTradeDataSchema */
        TaskTradeDataSchema: {
            /** @description Cooldown details. */
            cooldown: components["schemas"]["CooldownSchema"];
            /** @description Reward details. */
            trade: components["schemas"]["TaskTradeSchema"];
            /** @description Player details. */
            character: components["schemas"]["CharacterSchema"];
        };
        /** TaskTradeResponseSchema */
        TaskTradeResponseSchema: {
            data: components["schemas"]["TaskTradeDataSchema"];
        };
        /** TaskTradeSchema */
        TaskTradeSchema: {
            /**
             * Code
             * @description Item code.
             */
            code: string;
            /**
             * Quantity
             * @description Item quantity.
             */
            quantity: number;
        };
        /**
         * TaskType
         * @enum {string}
         */
        TaskType: "monsters" | "items";
        "TaskType_a-zA-Z0-9_-_____": components["schemas"]["TaskType"];
        /** TokenResponseSchema */
        TokenResponseSchema: {
            /** Token */
            token: string;
        };
        /** UnequipSchema */
        UnequipSchema: {
            /** @description Item slot. */
            slot: components["schemas"]["ItemSlot"];
            /**
             * Quantity
             * @description Item quantity. Applicable to utilities only.
             * @default 1
             */
            quantity: number;
        };
        /** UseItemResponseSchema */
        UseItemResponseSchema: {
            data: components["schemas"]["UseItemSchema"];
        };
        /** UseItemSchema */
        UseItemSchema: {
            /** @description Cooldown details. */
            cooldown: components["schemas"]["CooldownSchema"];
            /** @description Item details. */
            item: components["schemas"]["ItemSchema"];
            /** @description Player details. */
            character: components["schemas"]["CharacterSchema"];
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_server_details__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponseSchema"];
                };
            };
        };
    };
    get_bank_details_my_bank_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched bank details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BankResponseSchema"];
                };
            };
        };
    };
    get_bank_items_my_bank_items_get: {
        parameters: {
            query?: {
                /** @description Item to search in your bank. */
                item_code?: string;
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched items. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataPage_SimpleItemSchema_"];
                };
            };
        };
    };
    get_ge_sell_orders_my_grandexchange_orders_get: {
        parameters: {
            query?: {
                /** @description The code of the item. */
                code?: string;
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched orders details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataPage_GEOrderSchema_"];
                };
            };
        };
    };
    get_ge_sell_history_my_grandexchange_history_get: {
        parameters: {
            query?: {
                /** @description Order ID to search in your history. */
                id?: string;
                /** @description Item to search in your history. */
                code?: string;
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched sales history. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataPage_GeOrderHistorySchema_"];
                };
            };
        };
    };
    get_account_details_my_details_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched account details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyAccountDetailsSchema"];
                };
            };
        };
    };
    change_password_my_change_password_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChangePassword"];
            };
        };
        responses: {
            /** @description Password changed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseSchema"];
                };
            };
            /** @description Please use a different password. */
            458: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The current password you entered is invalid. */
            459: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    action_move_my__name__action_move_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of your character. */
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DestinationSchema"];
            };
        };
        responses: {
            /** @description The character has moved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CharacterMovementResponseSchema"];
                };
            };
            /** @description Map not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An action is already in progress for this character. */
            486: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character is already at the destination. */
            490: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Character not found. */
            498: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character is in cooldown. */
            499: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    action_rest_my__name__action_rest_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of your character. */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The character has rested successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CharacterRestResponseSchema"];
                };
            };
            /** @description An action is already in progress for this character. */
            486: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Character not found. */
            498: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character is in cooldown. */
            499: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    action_equip_item_my__name__action_equip_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of your character. */
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EquipSchema"];
            };
        };
        responses: {
            /** @description The item has been successfully equipped on your character. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EquipmentResponseSchema"];
                };
            };
            /** @description Item not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing item or insufficient quantity. */
            478: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character cannot equip more than 100 utilities in the same slot. */
            484: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description This item is already equipped. */
            485: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An action is already in progress for this character. */
            486: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The equipment slot is not empty. */
            491: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character does not meet the required condition. */
            496: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character's inventory is full. */
            497: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Character not found. */
            498: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character is in cooldown. */
            499: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    action_unequip_item_my__name__action_unequip_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of your character. */
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UnequipSchema"];
            };
        };
        responses: {
            /** @description The item has been successfully unequipped and added in their inventory. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EquipmentResponseSchema"];
                };
            };
            /** @description Item not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing item or insufficient quantity. */
            478: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character does not have enough HP to unequip this item. */
            483: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An action is already in progress for this character. */
            486: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The equipment slot is empty. */
            491: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character's inventory is full. */
            497: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Character not found. */
            498: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character is in cooldown. */
            499: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    action_use_item_my__name__action_use_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of your character. */
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SimpleItemSchema"];
            };
        };
        responses: {
            /** @description The item has been successfully used. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UseItemResponseSchema"];
                };
            };
            /** @description Item not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description This item is not a consumable. */
            476: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing item or insufficient quantity. */
            478: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An action is already in progress for this character. */
            486: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character does not meet the required condition. */
            496: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Character not found. */
            498: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character is in cooldown. */
            499: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    action_fight_my__name__action_fight_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of your character. */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The fight ended successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CharacterFightResponseSchema"];
                };
            };
            /** @description An action is already in progress for this character. */
            486: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character's inventory is full. */
            497: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Character not found. */
            498: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character is in cooldown. */
            499: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Monster not found on this map. */
            598: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    action_gathering_my__name__action_gathering_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of your character. */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The resource has been successfully gathered. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SkillResponseSchema"];
                };
            };
            /** @description An action is already in progress for this character. */
            486: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character's skill level is too low. */
            493: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character's inventory is full. */
            497: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Character not found. */
            498: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character is in cooldown. */
            499: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource not found on this map. */
            598: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    action_crafting_my__name__action_crafting_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of your character. */
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CraftingSchema"];
            };
        };
        responses: {
            /** @description The item was successfully crafted. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SkillResponseSchema"];
                };
            };
            /** @description Craft not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing item or insufficient quantity. */
            478: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An action is already in progress for this character. */
            486: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character's skill level is too low. */
            493: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character's inventory is full. */
            497: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Character not found. */
            498: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character is in cooldown. */
            499: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Workshop not found on this map. */
            598: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    action_deposit_bank_gold_my__name__action_bank_deposit_gold_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of your character. */
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DepositWithdrawGoldSchema"];
            };
        };
        responses: {
            /** @description Golds successfully deposited in your bank. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BankGoldTransactionResponseSchema"];
                };
            };
            /** @description Some of your items or your gold in the bank are already part of an ongoing transaction. */
            461: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An action is already in progress for this character. */
            486: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character does not have enough gold. */
            492: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Character not found. */
            498: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character is in cooldown. */
            499: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bank not found on this map. */
            598: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    action_deposit_bank_item_my__name__action_bank_deposit_item_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of your character. */
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SimpleItemSchema"][];
            };
        };
        responses: {
            /** @description Items successfully deposited in your bank. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BankItemTransactionResponseSchema"];
                };
            };
            /** @description Item not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Some of your items or your gold in the bank are already part of an ongoing transaction. */
            461: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Your bank is full. */
            462: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing item or insufficient quantity. */
            478: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An action is already in progress for this character. */
            486: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Character not found. */
            498: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character is in cooldown. */
            499: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bank not found on this map. */
            598: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    action_withdraw_bank_item_my__name__action_bank_withdraw_item_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of your character. */
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SimpleItemSchema"][];
            };
        };
        responses: {
            /** @description Items successfully withdrawn from your bank. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BankItemTransactionResponseSchema"];
                };
            };
            /** @description Item not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Some of your items or your gold in the bank are already part of an ongoing transaction. */
            461: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing item or insufficient quantity. */
            478: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An action is already in progress for this character. */
            486: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character's inventory is full. */
            497: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Character not found. */
            498: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character is in cooldown. */
            499: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bank not found on this map. */
            598: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    action_withdraw_bank_gold_my__name__action_bank_withdraw_gold_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of your character. */
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DepositWithdrawGoldSchema"];
            };
        };
        responses: {
            /** @description Golds successfully withdraw from your bank. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BankGoldTransactionResponseSchema"];
                };
            };
            /** @description Insufficient gold in your bank. */
            460: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Some of your items or your gold in the bank are already part of an ongoing transaction. */
            461: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An action is already in progress for this character. */
            486: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Character not found. */
            498: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character is in cooldown. */
            499: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bank not found on this map. */
            598: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    action_buy_bank_expansion_my__name__action_bank_buy_expansion_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of your character. */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Bank expansion successfully bought. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BankExtensionTransactionResponseSchema"];
                };
            };
            /** @description An action is already in progress for this character. */
            486: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character does not have enough gold. */
            492: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Character not found. */
            498: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character is in cooldown. */
            499: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bank not found on this map. */
            598: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    action_npc_buy_item_my__name__action_npc_buy_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of your character. */
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NpcMerchantBuySchema"];
            };
        };
        responses: {
            /** @description Item successfully bought from the NPC. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NpcMerchantTransactionResponseSchema"];
                };
            };
            /** @description Item not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description This item is not available for purchase. */
            441: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing item or insufficient quantity. */
            478: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An action is already in progress for this character. */
            486: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character does not have enough gold. */
            492: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character's inventory is full. */
            497: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Character not found. */
            498: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character is in cooldown. */
            499: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description NPC not found on this map. */
            598: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    action_npc_sell_item_my__name__action_npc_sell_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of your character. */
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NpcMerchantBuySchema"];
            };
        };
        responses: {
            /** @description Item successfully sold to the NPC. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NpcMerchantTransactionResponseSchema"];
                };
            };
            /** @description Item not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description This item cannot be sold. */
            442: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing item or insufficient quantity. */
            478: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An action is already in progress for this character. */
            486: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character's inventory is full. */
            497: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Character not found. */
            498: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character is in cooldown. */
            499: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description NPC not found on this map. */
            598: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    action_recycling_my__name__action_recycling_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of your character. */
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RecyclingSchema"];
            };
        };
        responses: {
            /** @description The items were successfully recycled. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecyclingResponseSchema"];
                };
            };
            /** @description Item not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description This item cannot be recycled. */
            473: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing item or insufficient quantity. */
            478: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An action is already in progress for this character. */
            486: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character's skill level is too low. */
            493: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character's inventory is full. */
            497: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Character not found. */
            498: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character is in cooldown. */
            499: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Workshop not found on this map. */
            598: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    action_ge_buy_item_my__name__action_grandexchange_buy_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of your character. */
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GEBuyOrderSchema"];
            };
        };
        responses: {
            /** @description Item successfully buy from the Grand Exchange. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GETransactionResponseSchema"];
                };
            };
            /** @description Order not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description This offer does not contain that many items. */
            434: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You cannot trade with yourself. */
            435: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description A transaction is already in progress for this order by another character. */
            436: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An action is already in progress for this character. */
            486: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character does not have enough gold. */
            492: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character's inventory is full. */
            497: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Character not found. */
            498: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character is in cooldown. */
            499: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Grand Exchange not found on this map. */
            598: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    action_ge_create_sell_order_my__name__action_grandexchange_sell_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of your character. */
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GEOrderCreationrSchema"];
            };
        };
        responses: {
            /** @description The sell order has been successfully created. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GECreateOrderTransactionResponseSchema"];
                };
            };
            /** @description Item not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You cannot create more than 100 orders at the same time. */
            433: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description This item cannot be sold. */
            437: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing item or insufficient quantity. */
            478: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An action is already in progress for this character. */
            486: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character does not have enough gold. */
            492: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Character not found. */
            498: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character is in cooldown. */
            499: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Grand Exchange not found on this map. */
            598: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    action_ge_cancel_sell_order_my__name__action_grandexchange_cancel_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of your character. */
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GECancelOrderSchema"];
            };
        };
        responses: {
            /** @description Your sell order has been successfully cancelled. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GETransactionResponseSchema"];
                };
            };
            /** @description Order not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description A transaction is already in progress for this order by another character. */
            436: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You cannot cancel an order that is not yours. */
            438: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An action is already in progress for this character. */
            486: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character's inventory is full. */
            497: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Character not found. */
            498: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character is in cooldown. */
            499: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Grand Exchange not found on this map. */
            598: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    action_complete_task_my__name__action_task_complete_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of your character. */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The task has been successfully completed. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RewardDataResponseSchema"];
                };
            };
            /** @description An action is already in progress for this character. */
            486: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character has no task assigned. */
            487: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character has not completed the task. */
            488: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character's inventory is full. */
            497: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Character not found. */
            498: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character is in cooldown. */
            499: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Tasks Master not found on this map. */
            598: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    action_task_exchange_my__name__action_task_exchange_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of your character. */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The tasks coins have been successfully exchanged. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RewardDataResponseSchema"];
                };
            };
            /** @description Missing item or insufficient quantity. */
            478: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An action is already in progress for this character. */
            486: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character's inventory is full. */
            497: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Character not found. */
            498: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character is in cooldown. */
            499: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Tasks Master not found on this map. */
            598: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    action_accept_new_task_my__name__action_task_new_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of your character. */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description New task successfully accepted. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskResponseSchema"];
                };
            };
            /** @description An action is already in progress for this character. */
            486: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character already has an assigned task. */
            489: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Character not found. */
            498: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character is in cooldown. */
            499: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Tasks Master not found on this map. */
            598: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    action_task_trade_my__name__action_task_trade_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of your character. */
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SimpleItemSchema"];
            };
        };
        responses: {
            /** @description You have successfully trade items to a Tasks Master. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskTradeResponseSchema"];
                };
            };
            /** @description The character does not have this task. */
            474: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Task already completed or too many items submitted. */
            475: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing item or insufficient quantity. */
            478: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An action is already in progress for this character. */
            486: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Character not found. */
            498: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character is in cooldown. */
            499: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Tasks Master not found on this map. */
            598: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    action_task_cancel_my__name__action_task_cancel_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of your character. */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The task has been successfully cancelled. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskCancelledResponseSchema"];
                };
            };
            /** @description Missing item or insufficient quantity. */
            478: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An action is already in progress for this character. */
            486: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Character not found. */
            498: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character is in cooldown. */
            499: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Tasks Master not found on this map. */
            598: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    action_give_gold_my__name__action_give_gold_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of your character. */
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GiveGoldSchema"];
            };
        };
        responses: {
            /** @description Gold given successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GiveGoldReponseSchema"];
                };
            };
            /** @description An action is already in progress for this character. */
            486: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character does not have enough gold. */
            492: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Character not found. */
            498: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character is in cooldown. */
            499: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    action_give_items_my__name__action_give_item_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of your character. */
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GiveItemsSchema"];
            };
        };
        responses: {
            /** @description Items given successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GiveItemReponseSchema"];
                };
            };
            /** @description Item not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing item or insufficient quantity. */
            478: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An action is already in progress for this character. */
            486: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character's inventory is full. */
            497: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Character not found. */
            498: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character is in cooldown. */
            499: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    action_delete_item_my__name__action_delete_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of your character. */
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SimpleItemSchema"];
            };
        };
        responses: {
            /** @description Item successfully deleted from your character. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteItemResponseSchema"];
                };
            };
            /** @description Missing item or insufficient quantity. */
            478: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An action is already in progress for this character. */
            486: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Character not found. */
            498: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character is in cooldown. */
            499: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    action_change_skin_my__name__action_change_skin_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of your character. */
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChangeSkinCharacterSchema"];
            };
        };
        responses: {
            /** @description Skin successfully changed. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChangeSkinResponseSchema"];
                };
            };
            /** @description An action is already in progress for this character. */
            486: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The character is in cooldown. */
            499: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You cannot choose this skin because you do not own it. */
            550: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_all_characters_logs_my_logs_get: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched logs. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataPage_LogSchema_"];
                };
            };
            /** @description Logs not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_character_logs_my_logs__name__get: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path: {
                /** @description Name of your character. */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched logs. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataPage_LogSchema_"];
                };
            };
            /** @description Logs not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Character not found. */
            498: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_my_characters_my_characters_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched characters. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyCharactersListSchema"];
                };
            };
        };
    };
    create_account_accounts_create_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddAccountSchema"];
            };
        };
        responses: {
            /** @description Account created successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseSchema"];
                };
            };
            /** @description This username is already taken. */
            456: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description This email is already in use. */
            457: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    forgot_password_accounts_forgot_password_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordResetRequestSchema"];
            };
        };
        responses: {
            /** @description If this email address is associated with an account, a reset link has been sent. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PasswordResetResponseSchema"];
                };
            };
        };
    };
    reset_password_accounts_reset_password_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordResetConfirmSchema"];
            };
        };
        responses: {
            /** @description Password has been successfully reset. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PasswordResetResponseSchema"];
                };
            };
            /** @description The password reset token is invalid. */
            560: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The password reset token has expired. */
            561: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description This password reset token has already been used. */
            562: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_account_achievements_accounts__account__achievements_get: {
        parameters: {
            query?: {
                /** @description Type of achievements. */
                type?: components["schemas"]["AchievementType_a-zA-Z0-9_-_____"];
                /** @description Filter by completed achievements. */
                completed?: boolean;
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path: {
                /** @description The character name. */
                account: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched achievements. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataPage_AccountAchievementSchema_"];
                };
            };
            /** @description Account not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_account_characters_accounts__account__characters_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The character name. */
                account: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched characters. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CharactersListSchema"];
                };
            };
        };
    };
    get_account_accounts__account__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The account name. */
                account: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched account. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountDetailsSchema"];
                };
            };
            /** @description Account not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_all_achievements_achievements_get: {
        parameters: {
            query?: {
                /** @description Type of achievements. */
                type?: components["schemas"]["AchievementType_a-zA-Z0-9_-_____"];
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched achievements. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataPage_AchievementSchema_"];
                };
            };
        };
    };
    get_achievement_achievements__code__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The code of the achievement. */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched achievement. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AchievementResponseSchema"];
                };
            };
            /** @description Achievement not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_all_badges_badges_get: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched badges. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataPage_BadgeSchema_"];
                };
            };
        };
    };
    get_badge_badges__code__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The code of the achievement. */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched badge. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadgeResponseSchema"];
                };
            };
            /** @description badge not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_character_characters_create_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddCharacterSchema"];
            };
        };
        responses: {
            /** @description Successfully created character. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CharacterResponseSchema"];
                };
            };
            /** @description This name is already in use. */
            494: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You have reached the maximum number of characters on your account. */
            495: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You cannot choose this skin because you do not own it. */
            550: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_character_characters_delete_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteCharacterSchema"];
            };
        };
        responses: {
            /** @description Successfully deleted character. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CharacterResponseSchema"];
                };
            };
            /** @description Character not found. */
            498: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_character_characters__name__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The character name. */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched character. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CharacterResponseSchema"];
                };
            };
            /** @description Character not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_all_effects_effects_get: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched effects. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataPage_EffectSchema_"];
                };
            };
        };
    };
    get_effect_effects__code__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The code of the achievement. */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched effect. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EffectResponseSchema"];
                };
            };
            /** @description effect not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_all_active_events_events_active_get: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched events details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataPage_ActiveEventSchema_"];
                };
            };
        };
    };
    get_all_events_events_get: {
        parameters: {
            query?: {
                /** @description Type of event. */
                type?: components["schemas"]["MapContentType_a-zA-Z0-9_-_____"];
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched events details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataPage_EventSchema_"];
                };
            };
        };
    };
    get_ge_sell_history_grandexchange_history__code__get: {
        parameters: {
            query?: {
                /** @description The seller (account name) of the item. */
                seller?: string;
                /** @description The buyer (account name) of the item. */
                buyer?: string;
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path: {
                /** @description The code of the item. */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched orders history. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataPage_GeOrderHistorySchema_"];
                };
            };
            /** @description Item not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_ge_sell_orders_grandexchange_orders_get: {
        parameters: {
            query?: {
                /** @description The code of the item. */
                code?: string;
                /** @description The seller (account name) of the item. */
                seller?: string;
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched orders details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataPage_GEOrderSchema_"];
                };
            };
        };
    };
    get_ge_sell_order_grandexchange_orders__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the order. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched order. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GEOrderReponseSchema"];
                };
            };
            /** @description Order not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_all_items_items_get: {
        parameters: {
            query?: {
                /** @description Name of the item. */
                name?: string;
                /** @description Minimum level items. */
                min_level?: number;
                /** @description Maximum level items. */
                max_level?: number;
                /** @description Type of items. */
                type?: components["schemas"]["ItemType_a-zA-Z0-9_-_____"];
                /** @description Skill to craft items. */
                craft_skill?: components["schemas"]["CraftSkill_a-zA-Z0-9_-_____"];
                /** @description Item code of items used as material for crafting. */
                craft_material?: string;
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Fetch items details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataPage_ItemSchema_"];
                };
            };
        };
    };
    get_item_items__code__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The code of the item. */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched item. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemResponseSchema"];
                };
            };
            /** @description Item not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_characters_leaderboard_leaderboard_characters_get: {
        parameters: {
            query?: {
                /** @description Default sort by combat total XP. */
                sort?: components["schemas"]["CharacterLeaderboardType_a-zA-Z0-9_-_____"];
                /** @description Find a character by name. */
                name?: string;
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched leaderboard. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataPage_CharacterLeaderboardSchema_"];
                };
            };
        };
    };
    get_accounts_leaderboard_leaderboard_accounts_get: {
        parameters: {
            query?: {
                /** @description Default sort by achievements points. */
                sort?: components["schemas"]["AccountLeaderboardType_a-zA-Z0-9_-_____"];
                /** @description Find a account by name. */
                name?: string;
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched leaderboard. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataPage_AccountLeaderboardSchema_"];
                };
            };
        };
    };
    get_all_maps_maps_get: {
        parameters: {
            query?: {
                /** @description Type of content on the map. */
                content_type?: components["schemas"]["MapContentType_a-zA-Z0-9_-_____"];
                /** @description Content code on the map. */
                content_code?: string;
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched maps details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataPage_MapSchema_"];
                };
            };
        };
    };
    get_map_maps__x___y__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The position x of the map. */
                x: number;
                /** @description The position X of the map. */
                y: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched map. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MapResponseSchema"];
                };
            };
            /** @description Map not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_all_monsters_monsters_get: {
        parameters: {
            query?: {
                /** @description Name of the monster. */
                name?: string;
                /** @description Monster minimum level. */
                min_level?: number;
                /** @description Monster maximum level. */
                max_level?: number;
                /** @description Item code of the drop. */
                drop?: string;
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched monsters details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataPage_MonsterSchema_"];
                };
            };
        };
    };
    get_monster_monsters__code__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The code of the monster. */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched monster. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MonsterResponseSchema"];
                };
            };
            /** @description Monster not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_all_npcs_npcs_details_get: {
        parameters: {
            query?: {
                /** @description Name of the npc. */
                name?: string;
                /** @description The type of the NPC. */
                type?: components["schemas"]["NPCType_a-zA-Z0-9_-_____"];
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched NPCs details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataPage_NPCSchema_"];
                };
            };
        };
    };
    get_npc_npcs_details__code__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The code of the NPC. */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched NPC. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NPCResponseSchema"];
                };
            };
            /** @description NPC not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_npc_items_npcs_items__code__get: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path: {
                /** @description The code of the NPC. */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched NPC Items. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataPage_NPCItem_"];
                };
            };
            /** @description NPC not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_all_npcs_items_npcs_items_get: {
        parameters: {
            query?: {
                /** @description The code of the item. */
                code?: string;
                /** @description The code of the npc. */
                npc?: string;
                /** @description The code of the currency. */
                currency?: string;
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched NPC Items. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataPage_NPCItem_"];
                };
            };
        };
    };
    get_all_resources_resources_get: {
        parameters: {
            query?: {
                /** @description Skill minimum level. */
                min_level?: number;
                /** @description Skill maximum level. */
                max_level?: number;
                /** @description The code of the skill. */
                skill?: components["schemas"]["GatheringSkill_a-zA-Z0-9_-_____"];
                /** @description Item code of the drop. */
                drop?: string;
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched resources details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataPage_ResourceSchema_"];
                };
            };
        };
    };
    get_resource_resources__code__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The code of the resource.
                 * @example copper_rocks
                 */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceResponseSchema"];
                };
            };
            /** @description Resource not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_all_tasks_tasks_list_get: {
        parameters: {
            query?: {
                /** @description Minimum level. */
                min_level?: number;
                /** @description Maximum level. */
                max_level?: number;
                /** @description The code of the skill. */
                skill?: components["schemas"]["Skill_a-zA-Z0-9_-_____"];
                /** @description The type of tasks. */
                type?: components["schemas"]["TaskType_a-zA-Z0-9_-_____"];
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched tasks details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataPage_TaskFullSchema_"];
                };
            };
        };
    };
    get_task_tasks_list__code__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The code of the task. */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched task. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskFullResponseSchema"];
                };
            };
            /** @description Task not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_all_tasks_rewards_tasks_rewards_get: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched tasks rewards details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataPage_DropRateSchema_"];
                };
            };
        };
    };
    get_tasks_reward_tasks_rewards__code__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The code of the tasks reward. */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched tasks reward. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RewardResponseSchema"];
                };
            };
            /** @description Tasks reward not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    generate_token_token_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Token generated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponseSchema"];
                };
            };
            /** @description Failed to generate token. */
            455: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
